<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="diaryMapper">

	<resultMap type="Board" id="board_rm">

		<id property="boardNo" column="BOARD_NO" />
		<result property="userNo" column="USER_NO" />
		<result property="boardType" column="BOARD_TYPE" />
		<result property="challengeNo" column="CHALLENGE_NO" />
		<result property="boardTitle" column="BOARD_TITLE" />
		<result property="boardContent" column="BOARD_CONTENT" />
		<result property="boardCnt" column="BOARD_CNT" />
		<result property="boardSt" column="BOARD_ST" />
		<result property="createDt" column="CREATE_DT" />
		<result property="updateDt" column="UPDATE_DT" />
		<result property="boardImg" column="BOARD_IMG" />

		<!--유저 -->
		<result property="userImg" column="USER_IMG" />
		<result property="userNickname" column="USER_NICKNAME" />

		<!-- 좋아요 -->
		<result property="likeCount" column="LIKE_COUNT" />
	

		<!-- 댓글 콜렉션 -->
		<collection property="replyList"
				  select="selectReplyList"
			 	  column="BOARD_NO"
				  javaType="java.util.ArrayList"
				  ofType="Reply">
	   </collection>
		
	</resultMap>
	
	<!-- reply에 대한 resultMap -->
    <resultMap type="Reply" id="reply_rm">
      <id property="replyNo" column="REPLY_NO"/>
      <result property="replyContent" column="REPLY_CONTENT"/>
      <result property="replyDT" column="REPLY_DT"/>
      <result property="replyTypeNo" column="REPLY_TYPE_NO"/>
      <result property="replyTargetNo" column="REPLY_TARGET_NO"/>
      <result property="userNo" column="USER_NO"/>
      <result property="replyST" column="REPLY_ST"/>
      <result property="parentNo" column="PARENT_NO" />
      <result property="replyStar" column="REPLY_STAR" />
      <result property="userNickname" column="USER_NICKNAME" />
      <result property="userImage" column="USER_IMG" />
      <result property="replyLike" column="REPLY_LIKE" />
      
   </resultMap>
	
   
   <!--운동  -->
	<resultMap type="Workout" id="workout_rm">
	<id property="workoutNo" column="WORKOUT_NO" />
	<result property="boardNo" column="BOARD_NO" />
	<result property="workoutName" column="WORKOUT_NAME" />
	<result property="workoutType" column="WORKOUT_TYPE" />
	<result property="workoutclass" column="WORKOUT_CLASS" />
	<result property="workoutMet" column="WORKOUT_MET" />
	<result property="workoutCnt" column="WORKOUT_CNT" />
	<result property="duration" column="WORKOUT_DURATION" />
	<result property="caloriesBurned" column="CALORIES_BURNED" />
	</resultMap>

	<!--음식  -->
	<resultMap type="Food" id="food_rm">
	<id property="foodNo" column="Food_No" />
	<result property="boardNo" column="BOARD_NO" />
	<result property="foodName" column="FOOD_NAME" />
	<result property="foodType" column="FOOD_TYPE" />
	<result property="foodCal" column="FOOD_CAL" />
	<result property="foodWeight" column="FOOD_WEIGHT" />
	<result property="foodCnt" column="FOOD_CNT" />
	<result property="servingSize" column="SERVING_SIZE" />
	<result property="totalCalories" column="CALORIES_INTAKE" />
	<result property="totalWeight" column="TOTAL_WEIGHT" />
		
	</resultMap>


	<!-- 특정 게시글 댓글 조회 1-->
	<select id="selectReplyList" resultMap="reply_rm">
	SELECT LEVEL, C.*, 
    COALESCE(L.REPLY_LIKE, 0) AS REPLY_LIKE
	FROM (
    	SELECT REPLY_NO, REPLY_CONTENT, TO_CHAR(REPLY_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') AS REPLY_DT,
        	  REPLY_TYPE_NO, REPLY_TARGET_NO, USER_NO, USER_NICKNAME, REPLY_STAR, USER_IMG, PARENT_NO, REPLY_ST
    	FROM REPLY
    JOIN USER_INFO USING(USER_NO)
    WHERE REPLY_TYPE_NO = #{replyTypeNo} AND REPLY_TARGET_NO = #{replyTargetNo}
	) C
	LEFT JOIN (
    	SELECT LIKE_TARGET_NO AS REPLY_NO, COUNT(*) AS REPLY_LIKE
    	FROM "LIKE"
    	WHERE LIKE_TYPE_NO = #{likeTypeNo}
	   	GROUP BY LIKE_TARGET_NO
	) L ON C.REPLY_NO = L.REPLY_NO
	START WITH C.PARENT_NO IS NULL
	CONNECT BY PRIOR C.REPLY_NO = C.PARENT_NO
	ORDER SIBLINGS BY C.REPLY_NO
	</select>
	
<select id="selectLikeCheck" resultType="int" parameterType="map">
    SELECT 
        R.REPLY_NO 
    FROM 
        REPLY R
    WHERE 
        R.REPLY_TARGET_NO = #{replyTargetNo}
        AND EXISTS (
            SELECT 1 
            FROM "LIKE" L2 
            WHERE L2.USER_NO = #{userNo} 
              AND L2.LIKE_TYPE_NO = #{likeTypeNo}
              AND L2.LIKE_TARGET_NO = R.REPLY_NO
        )
</select>
	


	<!-- 게시판 종류 목록 조회 -->
	<select id="selectBoardTypeList" resultType="map">
		SELECT * FROM
		"BOARD_TYPE"
	</select>

	<!-- 특정 게시판의 삭제되지 않은 게시글 수 조회 -->
	<select id="getListCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD
		WHERE BOARD_TYPE = #{boardType}
		AND BOARD_ST = 'N'
	</select>

	<!-- 게시글 목록조회 -->
	<select id="selectDiaryList" resultMap="board_rm">
		SELECT
		B.BOARD_NO, B.BOARD_TITLE,U.USER_NICKNAME,B.BOARD_CNT,
    <![CDATA[
    CASE  
        WHEN SYSDATE - B.CREATE_DT < 1/24/60
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24 * 60 * 60 ) || '초 전'
        WHEN SYSDATE - B.CREATE_DT < 1/24
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24 * 60) || '분 전'
        WHEN SYSDATE - B.CREATE_DT < 1
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24) || '시간 전'
        ELSE TO_CHAR(B.CREATE_DT, 'YYYY-MM-DD')
     END AS CREATE_DT,
     ]]>
		(SELECT COUNT(*)
		FROM "LIKE" L
		WHERE L.LIKE_TARGET_NO = B.BOARD_NO) AS
		LIKE_COUNT

		FROM "BOARD" B
		JOIN
		"USER_INFO" U ON B.USER_NO = U.USER_NO
		WHERE B.BOARD_ST = 'N' AND
		B.BOARD_TYPE = #{boardType}
		ORDER BY
		B.BOARD_NO DESC
	</select>

	<!-- 조회수 증가 -->
	<update id="updateReadCnt">
		UPDATE BOARD SET
		BOARD_CNT = BOARD_CNT + 1
		WHERE
		BOARD_NO = #{boardNo}
	</update>


	<!-- 게시글 상세조회 -->
	<select id="selectBoard" resultMap="board_rm">
		SELECT B.BOARD_NO,
		B.BOARD_TITLE,B.BOARD_IMG,
		B.BOARD_CONTENT,
		B.BOARD_TYPE,
		TO_CHAR(B.CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') AS CREATE_DT,
		TO_CHAR(B.UPDATE_DT, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') AS UPDATE_DT,
		B.BOARD_CNT, B.USER_NO, U.USER_NICKNAME,U.USER_IMG,
		(SELECT COUNT(*)
		FROM "LIKE" L
		WHERE L.LIKE_TYPE_NO = B.BOARD_NO) AS LIKE_COUNT
		FROM
		BOARD B JOIN USER_INFO U ON B.USER_NO = U.USER_NO
		WHERE B.BOARD_ST =
		'N' AND B.BOARD_TYPE = #{boardType}
		AND B.BOARD_NO = #{boardNo}
	</select>

	<!-- 특정 게시판의 삭제되지 않고 검색조건이 일치하는 게시글 수 조회 -->

	<select id="getListCountForSearch" resultType="_int">
		SELECT COUNT(*) FROM BOARD

		<!-- 작성자검색 -->
		<if test='key == "w"'>
			JOIN USER_INFO USING(USER_NO)
		</if>

		WHERE BOARD_TYPE = #{boardType}
		AND BOARD_ST = 'N'

		<choose>
			<when test='key=="t"'>
				<!--제목 -->
				AND BOARD_TITLE LIKE '%${query}%'
			</when>
			<when test='key=="c"'>
				<!-- 내용 -->
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			<when test='key=="tc"'>
				<!-- 제목 + 내용 -->
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE
				'%${query}%')
			</when>
			<when test='key=="w"'>
				<!-- 작성자검색 -->
				AND USER_NICKNAME LIKE '%${query}%'
			</when>
		</choose>

	</select>

	<select id="selectBoardListForSearch" resultMap="board_rm">
		SELECT
		B.BOARD_NO, B.BOARD_TITLE,U.USER_NICKNAME,B.BOARD_CNT,
    <![CDATA[
    CASE  
        WHEN SYSDATE - B.CREATE_DT < 1/24/60
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24 * 60 * 60 ) || '초 전'
        WHEN SYSDATE - B.CREATE_DT < 1/24
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24 * 60) || '분 전'
        WHEN SYSDATE - B.CREATE_DT < 1
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24) || '시간 전'
        ELSE TO_CHAR(B.CREATE_DT, 'YYYY-MM-DD')
     END AS CREATE_DT,
     ]]>
		(SELECT COUNT(*)
		FROM "LIKE" L
		WHERE L.LIKE_TARGET_NO = B.BOARD_NO) AS
		LIKE_COUNT

		FROM "BOARD" B
		JOIN "USER_INFO" U ON B.USER_NO = U.USER_NO
		WHERE B.BOARD_ST = 'N' AND
		B.BOARD_TYPE = #{boardType}

		<choose>
			<when test='key=="t"'>
				<!--제목 -->
				AND BOARD_TITLE LIKE '%${query}%'
			</when>
			<when test='key=="c"'>
				<!-- 내용 -->
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			<when test='key=="tc"'>
				<!-- 제목 + 내용 -->
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE
				'%${query}%')
			</when>
			<when test='key=="w"'>
				<!-- 작성자검색 -->
				AND USER_NICKNAME LIKE '%${query}%'
			</when>
		</choose>


		ORDER BY B.BOARD_NO DESC

	</select>

	<!-- 좋아요 여부확인서비스 -->
	<select id="boardLikeCheck" resultType="_int">
		SELECT COUNT(*) FROM
		"LIKE"
		WHERE LIKE_TARGET_NO = #{boardNo}
		AND USER_NO = #{userNo}
	</select>

	<!-- 좋아요 테이블 삽입 -->
	<insert id="insertBoardLike">
		INSERT INTO "LIKE" (USER_NO, LIKE_TYPE_NO,LIKE_TARGET_NO) VALUES (
		#{userNo}, #{boardType}, #{boardNo})
	</insert>

	<!-- 좋아요 테이블 삭제 -->
	<delete id="deleteBoardLike">
		DELETE FROM "LIKE"
		WHERE LIKE_TARGET_NO = #{boardNo}
		AND USER_NO = #{userNo}
	</delete>

	<!-- 좋아요 수 -->
	<select id="countBoardLike" resultType="_int">
		SELECT COUNT(*) FROM
		"LIKE" WHERE LIKE_TARGET_NO = ${boardNo}
	</select>

	<!-- 게시글 삽입  -->
	<insert id="boardInsert" parameterType="Board">
    <selectKey keyProperty="boardNo" resultType="int" order="BEFORE">
        SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO BOARD (
        BOARD_NO, USER_NO, BOARD_TYPE, CHALLENGE_NO, BOARD_TITLE,
        BOARD_CONTENT, BOARD_CNT, BOARD_ST, CREATE_DT, UPDATE_DT, BOARD_IMG
    ) VALUES (
        #{boardNo}, #{userNo}, #{boardType},
        null, #{boardTitle}, #{boardContent},
        #{boardCnt}, 
        'N', 
        DEFAULT, 
        DEFAULT, 
        #{boardImg}
        
    )
	</insert>

	<!-- 게시글 삽입시 이미지 업데이트  -->
	<update id="updateBoardImage">
    UPDATE BOARD
    SET BOARD_IMG = #{boardImg}
    WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 게시글 수정  -->
	<update id ="updateDiary">
	UPDATE BOARD SET BOARD_TITLE =#{boardTitle},
	BOARD_CONTENT=#{boardContent},
	UPDATE_DT=SYSDATE
	WHERE BOARD_TYPE=#{boardType}
	AND BOARD_NO = #{boardNo}
	</update>
	
	  <!-- 게시글 업데이트 -->
    <update id="updateBoard">
        UPDATE BOARD
        SET BOARD_TITLE = #{boardTitle},
            BOARD_CONTENT = #{boardContent},
            UPDATE_DT=SYSDATE
       WHERE BOARD_TYPE=#{boardType}
		 AND BOARD_NO = #{boardNo}
    </update>
	
	

	<!-- 이미지삭제  -->
	<update id="imageDelete">
    UPDATE Board
    SET BOARD_IMG = #{boardImg}
    WHERE BOARD_NO = #{boardNo}
    AND BOARD_IMG = #{deleteImagePath}
	</update>
	
	<!--삭제한이미지업로드  -->
	<update id="updateBoardImagePath">
    UPDATE Board
    SET BOARD_IMG = #{boardImg}
    WHERE BOARD_NO = #{boardNo}
	</update>

	
	<!-- 게시글 삭제  -->
	<update id="diaryDelete">
		UPDATE BOARD SET
		BOARD_ST = 'Y'
		WHERE BOARD_NO = #{boardNo}
		AND BOARD_TYPE = '1'
	
	</update>
	
	<!-- 음식검색 -->
	<select id="searchFood" resultMap="food_rm">
	SELECT FOOD_NO,FOOD_NAME, FOOD_CAL, FOOD_WEIGHT, FOOD_CNT
	FROM FOOD
	WHERE FOOD_NAME LIKE '%${query}%'
	ORDER BY FOOD_NAME DESC
	</select>
	
	<!--운동검색  -->
	<select id="searchWorkout" resultMap="workout_rm">
	SELECT WORKOUT_NO,WORKOUT_NAME,WORKOUT_MET, WORKOUT_CNT
	FROM WORKOUT
	WHERE WORKOUT_NAME LIKE '%${query}%'
	ORDER BY WORKOUT_NAME DESC
	</select>
	
	<!-- 음식정보추가 -->
	<insert id="addFoodToDiary" parameterType="Food">
   INSERT INTO DIARY_FOOD (BOARD_NO, FOOD_NO, SERVING_SIZE, CALORIES_INTAKE)
   VALUES (#{boardNo}, #{foodNo}, #{servingSize}, #{totalCalories})
   </insert>

	<!--운동정보추가  -->
   <insert id="addWorkoutToDiary" parameterType="Workout">
   INSERT INTO DIARY_WORKOUT (BOARD_NO, WORKOUT_NO, WORKOUT_DURATION, CALORIES_BURNED)
   VALUES (#{boardNo}, #{workoutNo}, #{duration}, #{caloriesBurned})
	</insert>
	
	<!-- boardNo에 해당하는 음식 정보 조회 -->
   <select id="selectFoodItems" resultMap="food_rm">
   SELECT df.BOARD_NO,df.FOOD_NO,f.FOOD_NAME,df.SERVING_SIZE,df.CALORIES_INTAKE,f.FOOD_WEIGHT,
   (df.SERVING_SIZE * f.FOOD_WEIGHT) AS TOTAL_WEIGHT
	FROM DIARY_FOOD df
	JOIN FOOD f ON df.FOOD_NO = f.FOOD_NO
	WHERE df.BOARD_NO = #{boardNo}

   </select>

   <!-- boardNo에 해당하는 운동 정보 조회 -->
   <select id="selectWorkoutItems" resultMap="workout_rm">
   SELECT dw.BOARD_NO,dw.WORKOUT_NO,dw.WORKOUT_DURATION,dw.CALORIES_BURNED,
   w.WORKOUT_NAME,w.WORKOUT_MET
	FROM DIARY_WORKOUT dw
	JOIN WORKOUT w ON dw.WORKOUT_NO = w.WORKOUT_NO
	WHERE dw.BOARD_NO = #{boardNo}

   </select>
   
   <!-- 음식 항목 업데이트 -->
	<update id="updateFood" parameterType="Food">
	   UPDATE DIARY_FOOD
	   SET SERVING_SIZE = #{servingSize}, 
	   CALORIES_INTAKE = #{totalCalories}
	   WHERE BOARD_NO = #{boardNo} 
	   AND FOOD_NO = #{foodNo}
	</update>
   
   <!-- 운동 항목 업데이트 -->
   <update id="updateWorkout" parameterType="Workout">
   UPDATE DIARY_WORKOUT 
   SET WORKOUT_DURATION = #{duration}, CALORIES_BURNED = #{caloriesBurned}
   WHERE BOARD_NO = #{boardNo} AND WORKOUT_NO = #{workoutNo}
   </update>
   
   
	


</mapper>