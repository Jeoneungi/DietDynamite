<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="challengeMapper">


	<resultMap type="BestUser" id="bestUser_rm">
		
		<id property="rank" column="RANK" />
		<result property="userNickname" column="USER_NICKNAME"/>
		<result property="userImg" column="USER_IMG"/>
		
	</resultMap>
 

	<resultMap type="Board" id="board_rm">

		<id property="boardNo" column="BOARD_NO" />
		<result property="userNo" column="USER_NO" />
		<result property="boardType" column="BOARD_TYPE" />
		<result property="challengeNo" column="CHALLENGE_NO" />
		<result property="boardTitle" column="BOARD_TITLE" />
		<result property="boardContent" column="BOARD_CONTENT" />
		<result property="boardCnt" column="BOARD_CNT" />
		<result property="boardSt" column="BOARD_ST" />
		<result property="createDt" column="CREATE_DT" />
		<result property="updateDt" column="UPDATE_DT" />
		<result property="boardImg" column="BOARD_IMG" />
		<result property="challengeName" column="CHALLENGE_NAME" />

		<!--유저 -->
		<result property="userImg" column="USER_IMG" />
		<result property="userNickname" column="USER_NICKNAME" />

		<!-- 좋아요 -->
		<result property="likeCount" column="LIKE_COUNT" />
	

		<!-- 댓글 콜렉션 -->
		<collection property="replyList"
				  select="selectReplyList"
			 	  column="BOARD_NO"
				  javaType="java.util.ArrayList"
				  ofType="Reply">
	   </collection>
		
	</resultMap>
	
	<!-- reply에 대한 resultMap -->
    <resultMap type="Reply" id="reply_rm">
      <id property="replyNo" column="REPLY_NO"/>
      <result property="replyContent" column="REPLY_CONTENT"/>
      <result property="replyDT" column="REPLY_DT"/>
      <result property="replyTypeNo" column="REPLY_TYPE_NO"/>
      <result property="replyTargetNo" column="REPLY_TARGET_NO"/>
      <result property="userNo" column="USER_NO"/>
      <result property="replyST" column="REPLY_ST"/>
      <result property="parentNo" column="PARENT_NO" />
      <result property="replyStar" column="REPLY_STAR" />
      <result property="userNickname" column="USER_NICKNAME" />
      <result property="userImage" column="USER_IMG" />
   </resultMap>
	
   	<!-- challenge에 대한 resultMap -->
    <resultMap type="Challenge" id="challenge_rm">
      <id property="userChallengeNo" column="USER_CHALLENGE_NO"/>
      <result property="userNo" column="USER_NO"/>
      <result property="challengeNo" column="CHALLENGE_NO"/>
      <result property="challengeName" column="CHALLENGE_NAME" />
      <result property="challengeSecession" column="CHALLENGE_SECESSION"/>
      <result property="challengeResult" column="CHALLENGE_RESULT"/>
      <result property="challengeStartDay" column="CHALLENGE_START_DAY"/>
      <result property="challengeDays" column="CHALLENGE_DAYS"/>
      <result property="challengeSuccessDays" column="CHALLENGE_SUCCESS_DAYS"/>
      <result property="todayResult" column="TODAY_RESULT"/>
      
      
   </resultMap>

	<!-- 특정 게시글 댓글 조회 1-->
	<select id="selectReplyList" resultMap="reply_rm">
		SELECT LEVEL, C.*FROM (
    		SELECT REPLY_NO, REPLY_CONTENT, TO_CHAR(REPLY_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') REPLY_DT,
            REPLY_TYPE_NO, REPLY_TARGET_NO , USER_NO, USER_NICKNAME, REPLY_STAR, USER_IMG, PARENT_NO, REPLY_ST
    		FROM "REPLY"
    		JOIN USER_INFO USING(USER_NO)
    		WHERE REPLY_TYPE_NO = 1 AND REPLY_TARGET_NO = ${replyTargetNo}) C
		START WITH PARENT_NO IS NULL
		CONNECT BY PRIOR REPLY_NO = PARENT_NO
		ORDER SIBLINGS BY REPLY_NO
				
	</select>
	

	<!-- 게시판 종류 목록 조회 -->
	<select id="selectChallengeTypeList" resultType="map">
		SELECT CHALLENGE_NO, CHALLENGE_NAME FROM
		"CHALLENGE_LIST"
	</select>

	<!-- 특정 게시판의 삭제되지 않은 게시글 수 조회 -->
	<select id="getListCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD
		WHERE CHALLENGE_NO = #{challengeNo}
		AND BOARD_ST = 'N'
	</select>

	<!-- 게시글 목록조회 -->
	<select id="selectChallengeList" resultMap="board_rm">
		SELECT
		B.BOARD_NO, B.BOARD_TITLE,U.USER_NICKNAME,B.BOARD_CNT,
    <![CDATA[
    CASE  
        WHEN SYSDATE - B.CREATE_DT < 1/24/60
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24 * 60 * 60 ) || '초 전'
        WHEN SYSDATE - B.CREATE_DT < 1/24
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24 * 60) || '분 전'
        WHEN SYSDATE - B.CREATE_DT < 1
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24) || '시간 전'
        ELSE TO_CHAR(B.CREATE_DT, 'YYYY-MM-DD')
     END AS CREATE_DT,
     ]]>
		(SELECT COUNT(*)
		FROM "LIKE" L
		WHERE L.LIKE_TARGET_NO = B.BOARD_NO) AS
		LIKE_COUNT, C.CHALLENGE_NAME

		FROM "BOARD" B
		JOIN
		"USER_INFO" U ON B.USER_NO = U.USER_NO
		JOIN
    	"CHALLENGE_LIST" C ON B.CHALLENGE_NO = C.CHALLENGE_NO
		WHERE B.BOARD_ST = 'N' 
		
		
		<if test='challengeNo != 0'>
			AND
			B.CHALLENGE_NO = #{challengeNo}
		</if>
		
		ORDER BY
		B.BOARD_NO DESC
	</select>

	<!-- 조회수 증가 -->
	<update id="updateReadCnt">
		UPDATE BOARD SET
		BOARD_CNT = BOARD_CNT + 1
		WHERE
		BOARD_NO = #{boardNo}
	</update>


	<!-- 게시글 상세조회 -->
	<select id="selectBoard" resultMap="board_rm">
		SELECT B.BOARD_NO,
		B.BOARD_TITLE,B.BOARD_IMG,
		B.BOARD_CONTENT,
		B.BOARD_TYPE,
		TO_CHAR(B.CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') AS CREATE_DT,
		TO_CHAR(B.UPDATE_DT, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') AS UPDATE_DT,
		B.BOARD_CNT, B.USER_NO, U.USER_NICKNAME,U.USER_IMG, C.CHALLENGE_NO, C.CHALLENGE_NAME,
		(SELECT COUNT(*)
		FROM "LIKE" L
		WHERE L.LIKE_TYPE_NO = B.BOARD_NO) AS LIKE_COUNT
		FROM
		BOARD B JOIN USER_INFO U ON B.USER_NO = U.USER_NO
		JOIN "CHALLENGE_LIST" C ON B.CHALLENGE_NO = C.CHALLENGE_NO
		WHERE B.BOARD_ST =
		'N' AND B.BOARD_TYPE = 2
		AND B.BOARD_NO = #{boardNo}
	</select>

	<!-- 특정 게시판의 삭제되지 않고 검색조건이 일치하는 게시글 수 조회 -->

	<select id="getListCountForSearch" resultType="_int">
		SELECT COUNT(*) FROM BOARD

		<!-- 작성자검색 -->
		<if test='key == "w"'>
			JOIN USER_INFO USING(USER_NO)
		</if>

		WHERE BOARD_TYPE = 2
		AND BOARD_ST = 'N'

		<choose>
			<when test='key=="t"'>
				<!--제목 -->
				AND BOARD_TITLE LIKE '%${query}%'
			</when>
			<when test='key=="c"'>
				<!-- 내용 -->
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			<when test='key=="tc"'>
				<!-- 제목 + 내용 -->
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE
				'%${query}%')
			</when>
			<when test='key=="w"'>
				<!-- 작성자검색 -->
				AND USER_NICKNAME LIKE '%${query}%'
			</when>
		</choose>

	</select>

	<select id="selectBoardListForSearch" resultMap="board_rm">
		SELECT
		B.BOARD_NO, B.BOARD_TITLE,U.USER_NICKNAME,B.BOARD_CNT,
    <![CDATA[
    CASE  
        WHEN SYSDATE - B.CREATE_DT < 1/24/60
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24 * 60 * 60 ) || '초 전'
        WHEN SYSDATE - B.CREATE_DT < 1/24
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24 * 60) || '분 전'
        WHEN SYSDATE - B.CREATE_DT < 1
        THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24) || '시간 전'
        ELSE TO_CHAR(B.CREATE_DT, 'YYYY-MM-DD')
     END AS CREATE_DT,
     ]]>
		(SELECT COUNT(*)
		FROM "LIKE" L
		WHERE L.LIKE_TARGET_NO = B.BOARD_NO) AS
		LIKE_COUNT

		FROM "BOARD" B
		JOIN "USER_INFO" U ON B.USER_NO = U.USER_NO
		WHERE B.BOARD_ST = 'N' AND
		B.BOARD_TYPE = 2

		<choose>
			<when test='key=="t"'>
				<!--제목 -->
				AND BOARD_TITLE LIKE '%${query}%'
			</when>
			<when test='key=="c"'>
				<!-- 내용 -->
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			<when test='key=="tc"'>
				<!-- 제목 + 내용 -->
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE
				'%${query}%')
			</when>
			<when test='key=="w"'>
				<!-- 작성자검색 -->
				AND USER_NICKNAME LIKE '%${query}%'
			</when>
		</choose>


		ORDER BY B.BOARD_NO DESC

	</select>

	<!-- 좋아요 여부확인서비스 -->
	<select id="boardLikeCheck" resultType="_int">
		SELECT COUNT(*) FROM
		"LIKE"
		WHERE LIKE_TARGET_NO = #{boardNo}
		AND LIKE_TYPE_NO = 1
		AND USER_NO = #{userNo}
	</select>

	<!-- 좋아요 테이블 삽입 -->
	<insert id="insertBoardLike">
		INSERT INTO "LIKE" (USER_NO, LIKE_TYPE_NO, LIKE_TARGET_NO) VALUES (
		#{userNo}, 1, #{boardNo})
	</insert>

	<!-- 좋아요 테이블 삭제 -->
	<delete id="deleteBoardLike">
		DELETE FROM "LIKE"
		WHERE LIKE_TARGET_NO = #{boardNo}
		AND LIKE_TYPE_NO = 1
		AND USER_NO = #{userNo}
	</delete>

	<!-- 좋아요 수 -->
	<select id="countBoardLike" resultType="_int">
		SELECT COUNT(*) FROM
		"LIKE" WHERE LIKE_TARGET_NO = #{boardNo}
		AND LIKE_TYPE_NO = 1
	</select>

	<!-- 게시글 삽입  -->
	<insert id="boardInsert" parameterType="Board">
    <selectKey keyProperty="boardNo" resultType="int" order="BEFORE">
        SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO BOARD (
        BOARD_NO, USER_NO, BOARD_TYPE, CHALLENGE_NO, BOARD_TITLE,
        BOARD_CONTENT, BOARD_CNT, BOARD_ST, CREATE_DT, UPDATE_DT, BOARD_IMG
    ) VALUES (
        #{boardNo}, #{userNo}, 2,
        #{challengeNo}, #{boardTitle}, #{boardContent},
        #{boardCnt}, 
        'N', 
        DEFAULT, 
        DEFAULT, 
        #{boardImg}
    )
	</insert>

	<!-- 게시글 삽입시 이미지 업데이트  -->
	<update id="updateBoardImage">
    UPDATE BOARD
    SET BOARD_IMG = #{boardImg}
    WHERE BOARD_NO = #{boardNo}
    
	</update>
	
	<!-- 게시글 수정  -->
	<update id ="updateChallenge">
	UPDATE BOARD SET CHALLENGE_NO = #{challengeNo}, BOARD_TITLE = #{boardTitle},
	BOARD_CONTENT=#{boardContent},
	UPDATE_DT=SYSDATE
	WHERE BOARD_TYPE = 2
	AND BOARD_NO = #{boardNo}
	</update>
	

	<!-- 이미지삭제  -->
	<update id="imageDelete">
    UPDATE Board
    SET BOARD_IMG = #{boardImg}
    WHERE BOARD_NO = #{boardNo}
    AND BOARD_IMG = #{deleteImagePath}
	</update>
	
	<!--삭제한이미지업로드  -->
	<update id="updateBoardImagePath">
    UPDATE Board
    SET BOARD_IMG = #{boardImg}
    WHERE BOARD_NO = #{boardNo}
	</update>

	
	<!-- 게시글 삭제  -->
	<update id="challengeDelete">
		UPDATE BOARD SET
		BOARD_ST = 'Y'
		WHERE BOARD_NO = #{boardNo}
		AND BOARD_TYPE = '2'
	
	</update>

	<!-- 진행중인 챌린지 정보 -->
	<select id="selectChallengeInfo" resultMap="challenge_rm">
	SELECT c.USER_CHALLENGE_NO,	cl.CHALLENGE_NAME, TO_CHAR(c.CHALLENGE_START_DAY, 'YYYY-MM-DD') as CHALLENGE_START_DAY, CHALLENGE_SECESSION,
		   TRUNC(SYSDATE) - TRUNC(c.CHALLENGE_START_DAY) + 1 AS CHALLENGE_DAYS,
		   (SELECT COUNT(*)	FROM CHALLENGE_DAILY_RESULT
		    WHERE USER_CHALLENGE_NO = #{UserChallengeNo}) AS CHALLENGE_SUCCESS_DAYS,
		   (SELECT DAILY_RESULT	FROM CHALLENGE_DAILY_RESULT
		   WHERE TRUNC(CHALLENGE_DATE) = TRUNC(SYSDATE)
	  	   AND USER_CHALLENGE_NO = #{UserChallengeNo}
		   AND TRUNC(CHALLENGE_DATE) = (SELECT TRUNC(MAX(CHALLENGE_DATE))
		 	FROM CHALLENGE_DAILY_RESULT
			WHERE USER_CHALLENGE_NO = #{UserChallengeNo})) AS TODAY_RESULT
	 		FROM CHALLENGE c
		   JOIN CHALLENGE_LIST cl ON c.CHALLENGE_NO = cl.CHALLENGE_NO
	 	   WHERE c.USER_CHALLENGE_NO = #{UserChallengeNo}
	</select>
	
	<!-- 유저 챌린지 번호 받아오기 -->
	<select id="selectUserChallenge" resultType="java.lang.Integer">
	    SELECT COALESCE(USER_CHALLENGE_NO, 0) FROM CHALLENGE
		WHERE USER_NO = #{userNo} AND CHALLENGE_NO = #{challengeNo}
		AND CHALLENGE_SECESSION = 'N'
	</select>
	 
	<!-- 오늘날짜 기준으로 기한지난 접속유저의 챌린지 종료 -->	 
	<select id="challengeSecession" resultType="_int">
		UPDATE CHALLENGE A
		SET CHALLENGE_SECESSION = 'Y'
		WHERE (TRUNC(SYSDATE) - TRUNC(A.CHALLENGE_START_DAY) + 1) >
      (SELECT B.CHALLENGE_LENGTH 
       FROM CHALLENGE_LIST B
       WHERE A.CHALLENGE_NO = B.CHALLENGE_NO)
      AND A.USER_NO = #{userNo}
	</select>
	
	
	<!-- 챌린지 인서트 -->
	<insert id="challengeInsert" parameterType="map">
 	    <selectKey keyProperty="userChallengeNo" resultType="int" order="BEFORE">
	        SELECT SEQ_USER_CHALLENGE_NO.NEXTVAL FROM DUAL
	    </selectKey>
    INSERT INTO CHALLENGE (
        USER_CHALLENGE_NO, USER_NO, CHALLENGE_NO, CHALLENGE_SECESSION,
		CHALLENGE_RESULT, CHALLENGE_START_DAY
		)
		VALUES (
        #{userChallengeNo}, #{userNo}, #{challengeNo},
         DEFAULT, DEFAULT, DEFAULT
        )
	</insert>
	
	<!-- 일일 완료 인서트 -->
	<insert id="dailyUpdate" parameterType="int"> 	  
    	INSERT INTO CHALLENGE_DAILY_RESULT(
        DAILY_RESULT, CHALLENGE_DATE, USER_CHALLENGE_NO)
		VALUES (1, sysdate, #{userChallengeNo})
	</insert>
	
	<!-- 챌린지 완료 업데이트 -->
	<update id="challengeComplete" parameterType="int"> 	  
		UPDATE CHALLENGE A SET 
		CHALLENGE_SECESSION = 'Y', CHALLENGE_RESULT = 1
		WHERE (TRUNC(SYSDATE) - TRUNC(CHALLENGE_START_DAY)) >
    	(SELECT CHALLENGE_LENGTH FROM CHALLENGE_LIST B
        WHERE A.CHALLENGE_NO = B.CHALLENGE_NO)
        AND USER_CHALLENGE_NO = #{userChallengeNo}
	</update>
	
	<!-- badge 정보 수집 -->
	<select id="selectUserBadgeList" resultType="map">
		SELECT CHALLENGE_NO, CHALLENGE_PIC FROM
		CHALLENGE
		JOIN CHALLENGE_LIST USING(CHALLENGE_NO)
		WHERE USER_NO = #{userNO}
		AND CHALLENGE_RESULT = 1
		GROUP BY CHALLENGE_NO, CHALLENGE_PIC
	</select>
	
	<!-- badge 정보 수집 -->
	<select id="selectBestUserList" resultMap="bestUser_rm">
	SELECT ROWNUM AS RANK, UI.USER_NICKNAME, UI.USER_IMG
	FROM (
		SELECT UI.USER_NICKNAME, UI.USER_IMG
		FROM (
			SELECT USER_NO, COUNT(*) AS POST_COUNT
			FROM BOARD
			WHERE CREATE_DT >= SYSDATE - 7
			AND BOARD_ST = 'N'
			GROUP BY USER_NO
			ORDER BY POST_COUNT DESC
		) B
	JOIN USER_INFO UI ON B.USER_NO = UI.USER_NO
	) UI
	</select>
	
	
</mapper>