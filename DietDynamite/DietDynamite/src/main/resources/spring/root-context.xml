<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
   
   <!-- Root Context: defines shared resources visible to all other web components -->
   
   <!-- 프로젝트 전반적으로 사용할
          DB 연결 관련 내용(JDBC, DBCP, MyBatis), AOP, 트랜잭션 처리,
          파일 업로드 등을 작성
   -->
      
      
	<!--DBCP 사용을위한DataSource를Bean으로등록-->
	<!--DataSource란? : java에서Connection Pool을지원하기위한인터페이스-->
	<!--BasicDataSource: DataSource인터페이스를구현한클래스, 아파치commons.dbcp에서제공-->
	<!--destroy-method="close" : 주어진세션을자동으로반환(close)하라는설정-->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		 <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		 <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		 <property name="username" value="dynamite"/>
		 <property name="password" value="dynamite1234"/>
		 
		 <!--defaultAutoCommit: SQL 수행후자동COMMIT 설정. (기본값: true) -->
		 <property name="defaultAutoCommit" value="false" />
		 
		 <!--커넥션풀설정-->
		 <property name="initialSize" value="10" /><!--초기 커넥션수, 기본0 -->
		 <property name="maxTotal" value="500" /> <!--최대 커넥션수, 기본8 -->
		 <property name="maxIdle" value="100" /> <!--유휴상태로 존재할 수 있는 커넥션 최대수, 기본8 -->
		 <property name="minIdle" value="10" /> <!--유휴상태로 존재할 수 있는 커넥션 최소수, 기본0 -->
		 <property name="maxWaitMillis" value="-1" /><!--예외발생 전 커넥션이 반환될떄까지 대기하는최대시간(ms), 기본-1(무기한) -->
	</bean>
 
 
	<!--SqlSession : sql구문을DB에전달, 실행하는객체
	  	 SqlSessionFactory : SqlSession을만드는객체
	  	 sqlSessionFactoryBean: mybatis설정파일(mybatis-config.xml)과Connection Pool 정보를이용하여SqlSessionFactory를만드는객체
	  	 sqlSessionTemplate : SqlSession객체에트랜잭션처리역할이가능하도록하는객체-->
	<!--마이바티스SqlSession등록하기(xml 방식으로bean 등록) -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		 <!--mybatis-config.xml 설정불러오기-->
		 <property name="configLocation" value="classpath:spring/mybatis-config.xml" />
		 <property name="dataSource" ref="dataSource" />
	</bean>
	
	<!--SqlSessionTemplate: 기본SQL 실행+ 트랜잭션관리역할을하는SqlSession을생성할수있게하는객체(Spring bean으로등록해야함.) -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean" />
	</bean>
	
	<!--스프링에서사용하는proxy를이용한트랜잭션제어가안될경우추가적인트랜잭션매니저를추가해서문제해결-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<!-- 
   파일 업로드를 위한 MutipartResolver 구현체 CommonsMultipartResolver  bean 등록 
   -> CommonsMultipartResolver를 bean으로 등록하면
      multipart/form-data 형식으로 요청 시  input type="file" 태그를 자동적으로 인식하여 
      MultipartFile 객체로 반환하고
      파일 외의 데이터(정수, 문자열 등의 텍스트 데이터)는 기존처럼 사용 가능(MultipartRequest 필요 없음)
   -->
   <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
       <property name="maxUploadSize" value="104857600"/>
       <property name="maxUploadSizePerFile" value="104857600"/>
       <property name="maxInMemorySize" value="104857600"/>
   </bean>
   <!-- 
      104857600 byte == 100MB
      
      maxUploadSize 
         : 한 요청당 업로드가 허용되는 최대 용량을 바이트 단위로 설정.
         -1 은 제한이 없다는 뜻으로 이 프로퍼티를 지정하지 않을때 기본값.
      
      maxUploadSizePerFile
       : 한 파일당 업로드가 허용되는 최대 용량을 바이트 단위로 설정.
         -1 은 제한이 없다는 뜻으로 이 프로퍼티를 지정하지 않을때 기본값.
         
      maxInMemorySize 
         : 디스크에 저장하지 않고 메모리에 유지하도록 
         허용하는 바이트 단위의 최대 용량을 설정.
         
          사이즈가 이보다 클 경우 이 사이즈 이상의 데이터는 파일에 저장됩니다. 
          기본값은 10240 바이트.
    -->
	
      
</beans>
